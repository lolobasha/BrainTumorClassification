{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "94c1875c",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "d5313225",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import os\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "# For Data Visualization\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report\n",
    "import tensorflow as tf\n",
    "from skimage import exposure\n",
    "from PIL import Image, ImageEnhance\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
    "from tensorflow.keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "233b142c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the path to the folders containing the cat and dog images\n",
    "Pituitary_dir = \"Training/pituitary/\"\n",
    "Glioma_dir = \"Training/glioma/\"\n",
    "NoTumor_dir = \"Training/no_tumor/\"\n",
    "meningioma_dir=\"Training/meningioma/\"\n",
    "\n",
    "Pituitary_Valdir = \"Validation/pituitary/\"\n",
    "Glioma_Valdir = \"Validation/glioma/\"\n",
    "NoTumor_Valdir = \"Validation/no_tumor/\"\n",
    "meningioma_Valdir=\"Validation/meningioma/\"\n",
    "\n",
    "Pituitary_Testdir = \"Testing/pituitary/\"\n",
    "Glioma_Testdir = \"Testing/glioma/\"\n",
    "NoTumor_Testdir = \"Testing/no_tumor/\"\n",
    "meningioma_Testdir=\"Testing/meningioma/\"\n",
    "\n",
    "def load_images(folder):\n",
    "    images = []\n",
    "    for filename in os.listdir(folder):\n",
    "        if filename.endswith(\".jpg\"):\n",
    "            img = cv2.imread(os.path.join(folder, filename))\n",
    "            if img is not None:\n",
    "                img = cv2.resize(img, (img_size, img_size))\n",
    "                gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "                # Normalize the image using min-max scaling\n",
    "                # Alternatively, you can normalize the image using z-score normalization\n",
    "                # mean = np.mean(image)\n",
    "                # std = np.std(image)\n",
    "                # normalized_image = (image - mean) / std\n",
    "\n",
    "                normalized_image = exposure.rescale_intensity(gray_image, in_range='image', out_range=(0, 1))\n",
    "                images.append(normalized_image)\n",
    "                \n",
    "               \n",
    "    return images\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "98f519c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the size of the images\n",
    "img_size = 128\n",
    "# Load the Brain Tumor images\n",
    "Pituitary_images= load_images(Pituitary_dir)\n",
    "Glioma_images= load_images(Glioma_dir)\n",
    "NoTumor_images= load_images(NoTumor_dir)\n",
    "Meningioma_images= load_images(meningioma_dir)\n",
    "Pituitary_testimages= load_images(Pituitary_Testdir)\n",
    "Glioma_testimages= load_images(Glioma_Testdir)\n",
    "NoTumor_testimages= load_images(NoTumor_Testdir)\n",
    "Meningioma_testimages= load_images(meningioma_Testdir)\n",
    "Pituitary_valimages= load_images(Pituitary_Valdir)\n",
    "Glioma_valimages= load_images(Glioma_Valdir)\n",
    "NoTumor_valimages= load_images(NoTumor_Valdir)\n",
    "Meningioma_valimages= load_images(meningioma_Valdir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "cad5b1d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((12168, 128, 128), (1705, 128, 128), (834, 128, 128))"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_images = np.concatenate([Pituitary_images,Glioma_images,NoTumor_images,Meningioma_images])\n",
    "\n",
    "test_images = np.concatenate([Pituitary_testimages,Glioma_testimages,NoTumor_testimages,Meningioma_testimages])\n",
    "\n",
    "val_images = np.concatenate([Pituitary_valimages,Glioma_valimages,NoTumor_valimages,Meningioma_valimages])\n",
    "\n",
    "\n",
    "# Scale the pixel values to be between 0 and 1\n",
    "# train_images = train_images / 255.0\n",
    "# test_images = test_images / 255.0\n",
    "train_images.shape,test_images.shape,val_images.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "212a1e23",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dir=\"Training/\"\n",
    "test_dir=\"Testing/\"\n",
    "Val_dir=\"Validation/\"\n",
    "\n",
    "def labels(folder):\n",
    "    labels=[]\n",
    "    for label in os.listdir(folder):\n",
    "        for image in os.listdir(folder+label):\n",
    "                labels.append(label)\n",
    "    return labels\n",
    "train_labels=labels(train_dir)\n",
    "test_labels=labels(test_dir)\n",
    "val_labels=labels(Val_dir)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8e28c76c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((12168,), (1705,), (834,))"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train=np.array(train_labels)\n",
    "y_test=np.array(test_labels)\n",
    "y_val=np.array(val_labels)\n",
    "y_train.shape,y_test.shape,y_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b17a85c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Initialize LabelEncoder\n",
    "label_encoder = LabelEncoder()\n",
    "\n",
    "# Fit label encoder and transform class labels to encoded labels\n",
    "encoded_labels_test = label_encoder.fit_transform(y_test)\n",
    "encoded_labels_train= label_encoder.fit_transform(y_train)\n",
    "encoded_labels_val= label_encoder.fit_transform(y_val)\n",
    "\n",
    "\n",
    "# print(encoded_labels_test,encoded_labels_train,encoded_labels_val)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "afe13976",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1705, 4), (12168, 4), (834, 4))"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.utils import to_categorical\n",
    "# Convert target array to categorical format\n",
    "train_labels2 = to_categorical(encoded_labels_train, num_classes=4)\n",
    "test_labels2 = to_categorical(encoded_labels_test, num_classes=4)\n",
    "val_labels2 = to_categorical(encoded_labels_val, num_classes=4)\n",
    "# Print the converted categorical target\n",
    "test_labels2.shape,train_labels2.shape,val_labels2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e7bfd30",
   "metadata": {},
   "source": [
    "# Data Representation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "c9fdb5d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,6))\n",
    "colors = ['#4285f4', '#ea4335', '#fbbc05', '#34a853']\n",
    "plt.rcParams.update({'font.size': 14})\n",
    "plt.pie([len([x for x in train_labels if x=='pituitary']),\n",
    "         len([x for x in train_labels if x=='no_tumor']),\n",
    "         len([x for x in train_labels if x=='meningioma']),\n",
    "         len([x for x in train_labels if x=='glioma'])],\n",
    "        labels=['Pituitary','No_Tumor', 'Meningioma', 'Glioma'],\n",
    "        colors=colors, autopct='%.1f%%', explode=(0.025,0.025,0.025,0.025),\n",
    "        startangle=30);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7c53e9f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14,6))\n",
    "colors = ['#4285f4', '#ea4335', '#fbbc05', '#34a853']\n",
    "plt.rcParams.update({'font.size': 14})\n",
    "plt.pie([len(train_labels), len(test_labels),len(val_labels)],\n",
    "        labels=['Train','Test','Validate'],\n",
    "        colors=colors, autopct='%.1f%%', explode=(0.05,0.05,0.05),\n",
    "        startangle=30);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "23ee5f73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names = [str(i) for i in range(4)]\n",
    "# Plot the first 25 images from the training set\n",
    "plt.figure(figsize=(10,10))\n",
    "for i in range(25):\n",
    "    plt.subplot(5,5,i+1)\n",
    "    plt.xticks([])\n",
    "    plt.yticks([])\n",
    "    plt.grid(False)\n",
    "    plt.imshow(train_images[i], cmap=plt.cm.binary)\n",
    "    plt.xlabel(class_names[encoded_labels_train[i]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab80c55e",
   "metadata": {},
   "source": [
    "#  3 Classifiers"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a215a31",
   "metadata": {},
   "source": [
    "# DNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "09b006fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "2434/2434 [==============================] - 34s 14ms/step - loss: 0.9962 - accuracy: 0.5742 - val_loss: 0.7934 - val_accuracy: 0.6847\n",
      "Epoch 2/5\n",
      "2434/2434 [==============================] - 36s 15ms/step - loss: 0.8071 - accuracy: 0.6759 - val_loss: 0.8482 - val_accuracy: 0.6523\n",
      "Epoch 3/5\n",
      "2434/2434 [==============================] - 35s 14ms/step - loss: 0.7345 - accuracy: 0.7150 - val_loss: 0.6982 - val_accuracy: 0.7194\n",
      "Epoch 4/5\n",
      "2434/2434 [==============================] - 35s 14ms/step - loss: 0.6722 - accuracy: 0.7487 - val_loss: 0.6520 - val_accuracy: 0.7746\n",
      "Epoch 5/5\n",
      "2434/2434 [==============================] - 35s 14ms/step - loss: 0.6397 - accuracy: 0.7637 - val_loss: 0.6309 - val_accuracy: 0.7722\n",
      "54/54 [==============================] - 0s 7ms/step - loss: 1.3112 - accuracy: 0.7226\n",
      "54/54 [==============================] - 1s 7ms/step\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Flatten, Dense\n",
    "\n",
    "# Define the DNN architecture\n",
    "model = Sequential()\n",
    "model.add(Flatten(input_shape=(128,128,1)))\n",
    "model.add(Dense(52,activation='relu'))\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(4, activation='softmax'))\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history=model.fit(train_images, train_labels2, epochs=5, batch_size=5, validation_data=(val_images, val_labels2))\n",
    "\n",
    "# Evaluate the model\n",
    "loss, accuracy1 = model.evaluate(test_images, test_labels2)\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(test_images)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "4fe2bf2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54/54 [==============================] - 0s 7ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[9.9706346e-01, 1.9265684e-05, 1.6536818e-04, 2.7519315e-03],\n",
       "       [9.9985254e-01, 5.6058991e-07, 3.8853914e-06, 1.4299434e-04],\n",
       "       [9.9999738e-01, 5.0576554e-10, 3.6117349e-08, 2.6672669e-06],\n",
       "       ...,\n",
       "       [2.7654096e-02, 2.4574712e-01, 1.4700763e-01, 5.7959116e-01],\n",
       "       [3.1827915e-02, 2.7689779e-01, 1.3805071e-01, 5.5322355e-01],\n",
       "       [4.9239382e-02, 3.9671424e-01, 1.2542902e-01, 4.2861733e-01]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "b62cd1a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.87      0.81       400\n",
      "           1       0.83      0.55      0.66       421\n",
      "           2       0.74      0.84      0.78       510\n",
      "           3       0.57      0.61      0.59       374\n",
      "\n",
      "    accuracy                           0.72      1705\n",
      "   macro avg       0.73      0.72      0.71      1705\n",
      "weighted avg       0.73      0.72      0.72      1705\n",
      " \n",
      " [[347   6  22  25]\n",
      " [ 38 232  72  79]\n",
      " [ 13   5 426  66]\n",
      " [ 56  35  56 227]]\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,'\\n',cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "8b58187b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca0c8953",
   "metadata": {},
   "source": [
    "# Customized CNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bde41488",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "\n",
    "# Define the CNN model\n",
    "def create_model(optimizer='adam', activation='relu'):\n",
    "    model = Sequential()\n",
    "    model.add(Conv2D(32, (3,3), activation=activation, input_shape=(128, 128, 1)))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "    model.add(Conv2D(64, (3, 3), activation=activation))\n",
    "    model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(128, activation=activation))\n",
    "    model.add(Dense(4, activation='softmax'))\n",
    "    model.compile(optimizer=optimizer, loss='category_crossentropy', metrics=['accuracy'])\n",
    "    return model\n",
    "\n",
    "# Create the KerasClassifier object\n",
    "model = KerasClassifier(build_fn=create_model)\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'optimizer': ['adam', 'rmsprop'],\n",
    "    'activation': ['relu', 'sigmoid'],\n",
    "    \n",
    "}\n",
    "\n",
    "# Create the GridSearchCV object\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3)\n",
    "\n",
    "# Fit the GridSearchCV object to the training data\n",
    "grid_search.fit(train_images, train_labels2)\n",
    "\n",
    "# Print the best parameters found during the grid search\n",
    "print(\"Best parameters: \", grid_search.best_params_)\n",
    "\n",
    "# Print the best score found during the grid search\n",
    "print(\"Best score: \", grid_search.best_score_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a52b44e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_6\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_2 (Conv2D)           (None, 126, 126, 32)      320       \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 63, 63, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 61, 61, 64)        18496     \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 30, 30, 64)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten_6 (Flatten)         (None, 57600)             0         \n",
      "                                                                 \n",
      " dense_22 (Dense)            (None, 128)               7372928   \n",
      "                                                                 \n",
      " dense_23 (Dense)            (None, 4)                 516       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 7,392,260\n",
      "Trainable params: 7,392,260\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/8\n",
      "381/381 [==============================] - 181s 471ms/step - loss: 0.7656 - accuracy: 0.7113 - val_loss: 0.6117 - val_accuracy: 0.8058\n",
      "Epoch 2/8\n",
      "381/381 [==============================] - 155s 406ms/step - loss: 0.4326 - accuracy: 0.8434 - val_loss: 0.5443 - val_accuracy: 0.8381\n",
      "Epoch 3/8\n",
      "381/381 [==============================] - 159s 417ms/step - loss: 0.3224 - accuracy: 0.8798 - val_loss: 0.4727 - val_accuracy: 0.8669\n",
      "Epoch 4/8\n",
      "381/381 [==============================] - 433s 1s/step - loss: 0.2594 - accuracy: 0.9020 - val_loss: 0.4377 - val_accuracy: 0.8909\n",
      "Epoch 5/8\n",
      "320/381 [========================>.....] - ETA: 1:22 - loss: 0.2174 - accuracy: 0.9151"
     ]
    }
   ],
   "source": [
    "# Create a sequential model\n",
    "model = Sequential()\n",
    "# Add convolutional layers\n",
    "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 1)))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Flatten())\n",
    "# Add fully connected layers with softmax activation for categorical classification\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dense(4, activation='softmax'))\n",
    "model.summary()\n",
    "# Compile the model with categorical crossentropy loss and appropriate optimizer\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history=model.fit(train_images,train_labels2, epochs=8,validation_data=(val_images, val_labels2))\n",
    "    \n",
    "# Evaluate the model\n",
    "loss, accuracy = model.evaluate(test_images, test_labels2)\n",
    "print(\"Test accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "fa71216f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54/54 [==============================] - 13s 195ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[1.8593067e-01, 7.2637433e-01, 4.0637605e-02, 4.7057353e-02],\n",
       "       [9.9616611e-01, 3.3021616e-04, 5.7270972e-04, 2.9309385e-03],\n",
       "       [9.9999928e-01, 4.0288502e-12, 2.3265999e-10, 7.0167084e-07],\n",
       "       ...,\n",
       "       [1.9984113e-04, 9.8566534e-03, 1.6964760e-02, 9.7297871e-01],\n",
       "       [3.3922261e-05, 9.1617584e-04, 4.9881517e-05, 9.9900001e-01],\n",
       "       [1.1131664e-05, 3.8995963e-04, 2.8964212e-05, 9.9956995e-01]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "12bff53d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.81      0.86      0.84       400\n",
      "           1       0.90      0.51      0.65       421\n",
      "           2       0.84      0.83      0.84       510\n",
      "           3       0.65      0.93      0.76       374\n",
      "\n",
      "    accuracy                           0.78      1705\n",
      "   macro avg       0.80      0.78      0.77      1705\n",
      "weighted avg       0.81      0.78      0.77      1705\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "91f3eb13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "eea890e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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NmvWrF2TJk22REVFafHQaqqwsNA2bNiQtnbt2rFAv9LaKJGLiIj4q0OTJk22K5BVb1FRUa5Jkybb8EZES29ThfUcnpkzOer112HWLL8rERERCaYoBbLIEPg9HzB7hUcoe+wx+P3vSR43Dk47TcFMREREqp3wCGWzZoFzmHOQmwuZmX5XJCIiUi2sXbs2OjU1NS01NTWtcePGnZo2bXps0evdu3fbwY6dPn16ncGDB7cs6zs6d+6cGryK4aqrrmrZtGnTYwsKCoJ5Wt+Fx4X+N9wA77zjPY+JgQhcBVpERKQyNGvWrGDRokU/AIwYMaJFXFxcwQMPPLCu6PO8vDxq1KhR6rEnn3zyzpNPPnlnWd8xb968RcGqt6CggA8++KBB8+bNc//73//Gn3322TuCde7i8vPziYmp2pgUHiNlPXvCNdd4z9PToXt3X8sRERHx00fLPqp750d3Nvto2UeVsoHohRdemDRkyJDEbt26tR02bFjip59+Wqdz586p7dq1S+vcuXPqggULagFMnTo1vlevXq3BC3QXXXRRUteuXVMSExM7Pvjgg02LzlenTp3ORe27du2a0rdv32OSk5Pb9+vXL7mwsBCACRMm1E9OTm7fpUuXlMGDB7csOm9JU6dOjW/btu2uIUOGbHjjjTcaFr2/YsWKmD/84Q+tUlJS0lJSUtI+/PDDugBPPfVUo7Zt26alpKSknXfeeclF/XvppZeOKK2+bt26tT3nnHOSU1JS2gP07t27Vfv27du1bt26/WOPPda46Ji33367XlpaWruUlJS07t27ty0oKODoo4/usHr16hjwwuNRRx3VYc2aNeVOduExUgYwciSFr75K1MyZsHgxtG3rd0UiIiJBZX+1LhVp/48v/lGudu4+N7eitSxdurT2F198sTgmJobNmzdHff3114tq1KjBpEmT4m+77bbEadOmLS15zJIlS2rPnDkza+vWrdHt2rXrcOutt26oVavWPjcx/Pjjj7Hz589flpSUlNelS5fUDz/8MK5Hjx45N91009GZmZmLUlNTc88555zkA9X1xhtvNLz44os3Dxo0aOvf/va3I/fs2WO1atVy11577VE9evTYce+99y7Nz89n27Zt0XPmzKn92GOPNZ81a9ai5s2b569bty66rH5/++23defNm7cwNTU1F2D8+PHLExISCrKzs61z585pl112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\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(8)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b3f5d6b",
   "metadata": {},
   "source": [
    "# Fine-Tuned CNN"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c073fce5",
   "metadata": {},
   "source": [
    "1) Model(1) ResNet50\n",
    "\n",
    "2) Model(2) ResNet101\n",
    "\n",
    "3) Model (3) DenseNet121\n",
    "\n",
    "4) Model(4) DenseNet169\n",
    "\n",
    "5) Model(5) AssemblyNet\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5a0c34c",
   "metadata": {},
   "source": [
    "Model(1) ResNet50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b3f0815a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_11\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " resnet50 (Functional)       (None, 4, 4, 2048)        23587712  \n",
      "                                                                 \n",
      " flatten_7 (Flatten)         (None, 32768)             0         \n",
      "                                                                 \n",
      " dense_30 (Dense)            (None, 256)               8388864   \n",
      "                                                                 \n",
      " dense_31 (Dense)            (None, 4)                 1028      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 31,977,604\n",
      "Trainable params: 31,924,484\n",
      "Non-trainable params: 53,120\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.applications import ResNet50\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "\n",
    "# Load the pre-trained ResNet50 model without the top layer\n",
    "base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(128, 128, 1))\n",
    "\n",
    "# Create a new model and add the ResNet50 base model\n",
    "model = Sequential()\n",
    "model.add(base_model)\n",
    "\n",
    "# Add additional layers on top of the base model\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dense(4, activation='softmax')) \n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Print the model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "52868b7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "507/507 [==============================] - 1511s 3s/step - loss: 0.9634 - accuracy: 0.7261 - val_loss: 0.8884 - val_accuracy: 0.7338\n",
      "Epoch 2/5\n",
      "507/507 [==============================] - 931s 2s/step - loss: 0.4805 - accuracy: 0.8292 - val_loss: 0.5370 - val_accuracy: 0.8285\n",
      "Epoch 3/5\n",
      "507/507 [==============================] - 923s 2s/step - loss: 0.3717 - accuracy: 0.8623 - val_loss: 0.8791 - val_accuracy: 0.8537\n",
      "Epoch 4/5\n",
      "507/507 [==============================] - 1233s 2s/step - loss: 0.3023 - accuracy: 0.8868 - val_loss: 0.3722 - val_accuracy: 0.9017\n",
      "Epoch 5/5\n",
      "507/507 [==============================] - 1404s 3s/step - loss: 0.2806 - accuracy: 0.8937 - val_loss: 0.3952 - val_accuracy: 0.8837\n",
      "54/54 [==============================] - 30s 523ms/step - loss: 1.1415 - accuracy: 0.8199\n",
      "Test accuracy: 0.8199413418769836\n"
     ]
    }
   ],
   "source": [
    "# Train your model using your own dataset\n",
    "batch_size=24\n",
    "steps = int(len(train_images)/batch_size)\n",
    "history=model.fit(train_images, train_labels2, epochs=5, steps_per_epoch=steps,validation_data=(val_images, val_labels2))\n",
    "\n",
    "# Evaluate the model\n",
    "loss, ResNet50_accuracy = model.evaluate(test_images, test_labels2)\n",
    "print(\"Test accuracy:\", ResNet50_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "bbcdfac6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54/54 [==============================] - 30s 494ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[9.9994159e-01, 9.6082609e-08, 1.1305067e-06, 5.7233137e-05],\n",
       "       [9.9999094e-01, 2.6100378e-07, 1.5473323e-06, 7.2558560e-06],\n",
       "       [9.9996591e-01, 1.3480200e-09, 1.3279890e-06, 3.2815784e-05],\n",
       "       ...,\n",
       "       [1.6226026e-04, 2.0249077e-04, 9.1894171e-06, 9.9962604e-01],\n",
       "       [1.5233949e-01, 1.3996876e-02, 2.1441570e-03, 8.3151954e-01],\n",
       "       [2.2993872e-02, 5.2721135e-02, 7.2639487e-03, 9.1702098e-01]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f5fcd56e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.89      0.91       400\n",
      "           1       0.93      0.74      0.82       421\n",
      "           2       0.85      0.75      0.80       510\n",
      "           3       0.65      0.93      0.76       374\n",
      "\n",
      "    accuracy                           0.82      1705\n",
      "   macro avg       0.84      0.83      0.82      1705\n",
      "weighted avg       0.84      0.82      0.82      1705\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "25f0746e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "03692ca1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(4)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50b61f80",
   "metadata": {},
   "source": [
    "Model (2) ResNet101"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec038e35",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import ResNet101\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "\n",
    "# Load the pre-trained ResNet101 model without the top layer\n",
    "base_model = ResNet101(weights='imagenet', include_top=False, input_shape=(128, 128, 1))\n",
    "\n",
    "# Create a new model and add the ResNet101 base model\n",
    "model = Sequential()\n",
    "model.add(base_model)\n",
    "\n",
    "# Add additional layers on top of the base model\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dense(4, activation='softmax')) \n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Print the model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f628b4d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "steps = int(len(train_images)/batch_size)\n",
    "# Train your model using your own dataset\n",
    "model.fit(train_images, train_labels2, epochs=5,steps_per_epoch=steps,validation_data=(val_images, val_labels2))\n",
    "\n",
    "# Evaluate the model\n",
    "loss, ResNet101_accuracy = model.evaluate(test_images, test_labels2)\n",
    "print(\"Test accuracy:\", ResNet101_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32603ed8",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b458d78",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7722ba0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac05e0d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(4)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2c7a3bc",
   "metadata": {},
   "source": [
    "Model(4) DenseNet121"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "2c2b12af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "__________________________________________________________________________________________________\n",
      " Layer (type)                   Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      " input_7 (InputLayer)           [(None, 128, 128, 3  0           []                               \n",
      "                                )]                                                                \n",
      "                                                                                                  \n",
      " zero_padding2d_10 (ZeroPadding  (None, 134, 134, 3)  0          ['input_7[0][0]']                \n",
      " 2D)                                                                                              \n",
      "                                                                                                  \n",
      " conv1/conv (Conv2D)            (None, 64, 64, 64)   9408        ['zero_padding2d_10[0][0]']      \n",
      "                                                                                                  \n",
      " conv1/bn (BatchNormalization)  (None, 64, 64, 64)   256         ['conv1/conv[0][0]']             \n",
      "                                                                                                  \n",
      " conv1/relu (Activation)        (None, 64, 64, 64)   0           ['conv1/bn[0][0]']               \n",
      "                                                                                                  \n",
      " zero_padding2d_11 (ZeroPadding  (None, 66, 66, 64)  0           ['conv1/relu[0][0]']             \n",
      " 2D)                                                                                              \n",
      "                                                                                                  \n",
      " pool1 (MaxPooling2D)           (None, 32, 32, 64)   0           ['zero_padding2d_11[0][0]']      \n",
      "                                                                                                  \n",
      " conv2_block1_0_bn (BatchNormal  (None, 32, 32, 64)  256         ['pool1[0][0]']                  \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block1_0_relu (Activatio  (None, 32, 32, 64)  0           ['conv2_block1_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block1_1_conv (Conv2D)   (None, 32, 32, 128)  8192        ['conv2_block1_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block1_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block1_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block1_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block1_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block1_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block1_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block1_concat (Concatena  (None, 32, 32, 96)  0           ['pool1[0][0]',                  \n",
      " te)                                                              'conv2_block1_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block2_0_bn (BatchNormal  (None, 32, 32, 96)  384         ['conv2_block1_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block2_0_relu (Activatio  (None, 32, 32, 96)  0           ['conv2_block2_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block2_1_conv (Conv2D)   (None, 32, 32, 128)  12288       ['conv2_block2_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block2_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block2_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block2_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block2_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block2_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block2_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block2_concat (Concatena  (None, 32, 32, 128)  0          ['conv2_block1_concat[0][0]',    \n",
      " te)                                                              'conv2_block2_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block3_0_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block2_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block3_0_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block3_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block3_1_conv (Conv2D)   (None, 32, 32, 128)  16384       ['conv2_block3_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block3_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block3_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block3_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block3_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block3_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block3_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block3_concat (Concatena  (None, 32, 32, 160)  0          ['conv2_block2_concat[0][0]',    \n",
      " te)                                                              'conv2_block3_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block4_0_bn (BatchNormal  (None, 32, 32, 160)  640        ['conv2_block3_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block4_0_relu (Activatio  (None, 32, 32, 160)  0          ['conv2_block4_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv2_block4_1_conv (Conv2D)   (None, 32, 32, 128)  20480       ['conv2_block4_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block4_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block4_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block4_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block4_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block4_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block4_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block4_concat (Concatena  (None, 32, 32, 192)  0          ['conv2_block3_concat[0][0]',    \n",
      " te)                                                              'conv2_block4_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block5_0_bn (BatchNormal  (None, 32, 32, 192)  768        ['conv2_block4_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block5_0_relu (Activatio  (None, 32, 32, 192)  0          ['conv2_block5_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block5_1_conv (Conv2D)   (None, 32, 32, 128)  24576       ['conv2_block5_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block5_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block5_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block5_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block5_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block5_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block5_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block5_concat (Concatena  (None, 32, 32, 224)  0          ['conv2_block4_concat[0][0]',    \n",
      " te)                                                              'conv2_block5_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block6_0_bn (BatchNormal  (None, 32, 32, 224)  896        ['conv2_block5_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block6_0_relu (Activatio  (None, 32, 32, 224)  0          ['conv2_block6_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block6_1_conv (Conv2D)   (None, 32, 32, 128)  28672       ['conv2_block6_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block6_1_bn (BatchNormal  (None, 32, 32, 128)  512        ['conv2_block6_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv2_block6_1_relu (Activatio  (None, 32, 32, 128)  0          ['conv2_block6_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv2_block6_2_conv (Conv2D)   (None, 32, 32, 32)   36864       ['conv2_block6_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv2_block6_concat (Concatena  (None, 32, 32, 256)  0          ['conv2_block5_concat[0][0]',    \n",
      " te)                                                              'conv2_block6_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " pool2_bn (BatchNormalization)  (None, 32, 32, 256)  1024        ['conv2_block6_concat[0][0]']    \n",
      "                                                                                                  \n",
      " pool2_relu (Activation)        (None, 32, 32, 256)  0           ['pool2_bn[0][0]']               \n",
      "                                                                                                  \n",
      " pool2_conv (Conv2D)            (None, 32, 32, 128)  32768       ['pool2_relu[0][0]']             \n",
      "                                                                                                  \n",
      " pool2_pool (AveragePooling2D)  (None, 16, 16, 128)  0           ['pool2_conv[0][0]']             \n",
      "                                                                                                  \n",
      " conv3_block1_0_bn (BatchNormal  (None, 16, 16, 128)  512        ['pool2_pool[0][0]']             \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block1_0_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block1_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block1_1_conv (Conv2D)   (None, 16, 16, 128)  16384       ['conv3_block1_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block1_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block1_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block1_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block1_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block1_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block1_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block1_concat (Concatena  (None, 16, 16, 160)  0          ['pool2_pool[0][0]',             \n",
      " te)                                                              'conv3_block1_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block2_0_bn (BatchNormal  (None, 16, 16, 160)  640        ['conv3_block1_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block2_0_relu (Activatio  (None, 16, 16, 160)  0          ['conv3_block2_0_bn[0][0]']      \n",
      " n)                                                                                               \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv3_block2_1_conv (Conv2D)   (None, 16, 16, 128)  20480       ['conv3_block2_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block2_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block2_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block2_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block2_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block2_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block2_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block2_concat (Concatena  (None, 16, 16, 192)  0          ['conv3_block1_concat[0][0]',    \n",
      " te)                                                              'conv3_block2_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block3_0_bn (BatchNormal  (None, 16, 16, 192)  768        ['conv3_block2_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block3_0_relu (Activatio  (None, 16, 16, 192)  0          ['conv3_block3_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block3_1_conv (Conv2D)   (None, 16, 16, 128)  24576       ['conv3_block3_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block3_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block3_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block3_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block3_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block3_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block3_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block3_concat (Concatena  (None, 16, 16, 224)  0          ['conv3_block2_concat[0][0]',    \n",
      " te)                                                              'conv3_block3_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block4_0_bn (BatchNormal  (None, 16, 16, 224)  896        ['conv3_block3_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block4_0_relu (Activatio  (None, 16, 16, 224)  0          ['conv3_block4_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block4_1_conv (Conv2D)   (None, 16, 16, 128)  28672       ['conv3_block4_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block4_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block4_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block4_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block4_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block4_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block4_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block4_concat (Concatena  (None, 16, 16, 256)  0          ['conv3_block3_concat[0][0]',    \n",
      " te)                                                              'conv3_block4_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block5_0_bn (BatchNormal  (None, 16, 16, 256)  1024       ['conv3_block4_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block5_0_relu (Activatio  (None, 16, 16, 256)  0          ['conv3_block5_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block5_1_conv (Conv2D)   (None, 16, 16, 128)  32768       ['conv3_block5_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block5_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block5_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block5_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block5_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block5_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block5_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block5_concat (Concatena  (None, 16, 16, 288)  0          ['conv3_block4_concat[0][0]',    \n",
      " te)                                                              'conv3_block5_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block6_0_bn (BatchNormal  (None, 16, 16, 288)  1152       ['conv3_block5_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block6_0_relu (Activatio  (None, 16, 16, 288)  0          ['conv3_block6_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block6_1_conv (Conv2D)   (None, 16, 16, 128)  36864       ['conv3_block6_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block6_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block6_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block6_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block6_1_bn[0][0]']      \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block6_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block6_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block6_concat (Concatena  (None, 16, 16, 320)  0          ['conv3_block5_concat[0][0]',    \n",
      " te)                                                              'conv3_block6_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block7_0_bn (BatchNormal  (None, 16, 16, 320)  1280       ['conv3_block6_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block7_0_relu (Activatio  (None, 16, 16, 320)  0          ['conv3_block7_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block7_1_conv (Conv2D)   (None, 16, 16, 128)  40960       ['conv3_block7_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block7_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block7_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block7_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block7_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block7_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block7_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block7_concat (Concatena  (None, 16, 16, 352)  0          ['conv3_block6_concat[0][0]',    \n",
      " te)                                                              'conv3_block7_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block8_0_bn (BatchNormal  (None, 16, 16, 352)  1408       ['conv3_block7_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block8_0_relu (Activatio  (None, 16, 16, 352)  0          ['conv3_block8_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block8_1_conv (Conv2D)   (None, 16, 16, 128)  45056       ['conv3_block8_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block8_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block8_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block8_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block8_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block8_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block8_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block8_concat (Concatena  (None, 16, 16, 384)  0          ['conv3_block7_concat[0][0]',    \n",
      " te)                                                              'conv3_block8_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block9_0_bn (BatchNormal  (None, 16, 16, 384)  1536       ['conv3_block8_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block9_0_relu (Activatio  (None, 16, 16, 384)  0          ['conv3_block9_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block9_1_conv (Conv2D)   (None, 16, 16, 128)  49152       ['conv3_block9_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block9_1_bn (BatchNormal  (None, 16, 16, 128)  512        ['conv3_block9_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv3_block9_1_relu (Activatio  (None, 16, 16, 128)  0          ['conv3_block9_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv3_block9_2_conv (Conv2D)   (None, 16, 16, 32)   36864       ['conv3_block9_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block9_concat (Concatena  (None, 16, 16, 416)  0          ['conv3_block8_concat[0][0]',    \n",
      " te)                                                              'conv3_block9_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv3_block10_0_bn (BatchNorma  (None, 16, 16, 416)  1664       ['conv3_block9_concat[0][0]']    \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block10_0_relu (Activati  (None, 16, 16, 416)  0          ['conv3_block10_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block10_1_conv (Conv2D)  (None, 16, 16, 128)  53248       ['conv3_block10_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block10_1_bn (BatchNorma  (None, 16, 16, 128)  512        ['conv3_block10_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block10_1_relu (Activati  (None, 16, 16, 128)  0          ['conv3_block10_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block10_2_conv (Conv2D)  (None, 16, 16, 32)   36864       ['conv3_block10_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block10_concat (Concaten  (None, 16, 16, 448)  0          ['conv3_block9_concat[0][0]',    \n",
      " ate)                                                             'conv3_block10_2_conv[0][0]']   \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv3_block11_0_bn (BatchNorma  (None, 16, 16, 448)  1792       ['conv3_block10_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block11_0_relu (Activati  (None, 16, 16, 448)  0          ['conv3_block11_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block11_1_conv (Conv2D)  (None, 16, 16, 128)  57344       ['conv3_block11_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block11_1_bn (BatchNorma  (None, 16, 16, 128)  512        ['conv3_block11_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block11_1_relu (Activati  (None, 16, 16, 128)  0          ['conv3_block11_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block11_2_conv (Conv2D)  (None, 16, 16, 32)   36864       ['conv3_block11_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block11_concat (Concaten  (None, 16, 16, 480)  0          ['conv3_block10_concat[0][0]',   \n",
      " ate)                                                             'conv3_block11_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block12_0_bn (BatchNorma  (None, 16, 16, 480)  1920       ['conv3_block11_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block12_0_relu (Activati  (None, 16, 16, 480)  0          ['conv3_block12_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block12_1_conv (Conv2D)  (None, 16, 16, 128)  61440       ['conv3_block12_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block12_1_bn (BatchNorma  (None, 16, 16, 128)  512        ['conv3_block12_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv3_block12_1_relu (Activati  (None, 16, 16, 128)  0          ['conv3_block12_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv3_block12_2_conv (Conv2D)  (None, 16, 16, 32)   36864       ['conv3_block12_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv3_block12_concat (Concaten  (None, 16, 16, 512)  0          ['conv3_block11_concat[0][0]',   \n",
      " ate)                                                             'conv3_block12_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " pool3_bn (BatchNormalization)  (None, 16, 16, 512)  2048        ['conv3_block12_concat[0][0]']   \n",
      "                                                                                                  \n",
      " pool3_relu (Activation)        (None, 16, 16, 512)  0           ['pool3_bn[0][0]']               \n",
      "                                                                                                  \n",
      " pool3_conv (Conv2D)            (None, 16, 16, 256)  131072      ['pool3_relu[0][0]']             \n",
      "                                                                                                  \n",
      " pool3_pool (AveragePooling2D)  (None, 8, 8, 256)    0           ['pool3_conv[0][0]']             \n",
      "                                                                                                  \n",
      " conv4_block1_0_bn (BatchNormal  (None, 8, 8, 256)   1024        ['pool3_pool[0][0]']             \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block1_0_relu (Activatio  (None, 8, 8, 256)   0           ['conv4_block1_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block1_1_conv (Conv2D)   (None, 8, 8, 128)    32768       ['conv4_block1_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block1_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block1_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block1_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block1_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block1_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block1_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block1_concat (Concatena  (None, 8, 8, 288)   0           ['pool3_pool[0][0]',             \n",
      " te)                                                              'conv4_block1_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block2_0_bn (BatchNormal  (None, 8, 8, 288)   1152        ['conv4_block1_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block2_0_relu (Activatio  (None, 8, 8, 288)   0           ['conv4_block2_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block2_1_conv (Conv2D)   (None, 8, 8, 128)    36864       ['conv4_block2_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block2_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block2_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block2_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block2_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block2_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block2_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block2_concat (Concatena  (None, 8, 8, 320)   0           ['conv4_block1_concat[0][0]',    \n",
      " te)                                                              'conv4_block2_2_conv[0][0]']    \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv4_block3_0_bn (BatchNormal  (None, 8, 8, 320)   1280        ['conv4_block2_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block3_0_relu (Activatio  (None, 8, 8, 320)   0           ['conv4_block3_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block3_1_conv (Conv2D)   (None, 8, 8, 128)    40960       ['conv4_block3_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block3_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block3_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block3_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block3_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block3_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block3_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block3_concat (Concatena  (None, 8, 8, 352)   0           ['conv4_block2_concat[0][0]',    \n",
      " te)                                                              'conv4_block3_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block4_0_bn (BatchNormal  (None, 8, 8, 352)   1408        ['conv4_block3_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block4_0_relu (Activatio  (None, 8, 8, 352)   0           ['conv4_block4_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block4_1_conv (Conv2D)   (None, 8, 8, 128)    45056       ['conv4_block4_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block4_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block4_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block4_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block4_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block4_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block4_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block4_concat (Concatena  (None, 8, 8, 384)   0           ['conv4_block3_concat[0][0]',    \n",
      " te)                                                              'conv4_block4_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block5_0_bn (BatchNormal  (None, 8, 8, 384)   1536        ['conv4_block4_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block5_0_relu (Activatio  (None, 8, 8, 384)   0           ['conv4_block5_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block5_1_conv (Conv2D)   (None, 8, 8, 128)    49152       ['conv4_block5_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block5_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block5_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block5_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block5_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block5_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block5_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block5_concat (Concatena  (None, 8, 8, 416)   0           ['conv4_block4_concat[0][0]',    \n",
      " te)                                                              'conv4_block5_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block6_0_bn (BatchNormal  (None, 8, 8, 416)   1664        ['conv4_block5_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block6_0_relu (Activatio  (None, 8, 8, 416)   0           ['conv4_block6_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block6_1_conv (Conv2D)   (None, 8, 8, 128)    53248       ['conv4_block6_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block6_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block6_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block6_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block6_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block6_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block6_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block6_concat (Concatena  (None, 8, 8, 448)   0           ['conv4_block5_concat[0][0]',    \n",
      " te)                                                              'conv4_block6_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block7_0_bn (BatchNormal  (None, 8, 8, 448)   1792        ['conv4_block6_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block7_0_relu (Activatio  (None, 8, 8, 448)   0           ['conv4_block7_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv4_block7_1_conv (Conv2D)   (None, 8, 8, 128)    57344       ['conv4_block7_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block7_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block7_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block7_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block7_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block7_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block7_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block7_concat (Concatena  (None, 8, 8, 480)   0           ['conv4_block6_concat[0][0]',    \n",
      " te)                                                              'conv4_block7_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block8_0_bn (BatchNormal  (None, 8, 8, 480)   1920        ['conv4_block7_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block8_0_relu (Activatio  (None, 8, 8, 480)   0           ['conv4_block8_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block8_1_conv (Conv2D)   (None, 8, 8, 128)    61440       ['conv4_block8_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block8_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block8_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block8_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block8_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block8_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block8_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block8_concat (Concatena  (None, 8, 8, 512)   0           ['conv4_block7_concat[0][0]',    \n",
      " te)                                                              'conv4_block8_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block9_0_bn (BatchNormal  (None, 8, 8, 512)   2048        ['conv4_block8_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block9_0_relu (Activatio  (None, 8, 8, 512)   0           ['conv4_block9_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block9_1_conv (Conv2D)   (None, 8, 8, 128)    65536       ['conv4_block9_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block9_1_bn (BatchNormal  (None, 8, 8, 128)   512         ['conv4_block9_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv4_block9_1_relu (Activatio  (None, 8, 8, 128)   0           ['conv4_block9_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv4_block9_2_conv (Conv2D)   (None, 8, 8, 32)     36864       ['conv4_block9_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block9_concat (Concatena  (None, 8, 8, 544)   0           ['conv4_block8_concat[0][0]',    \n",
      " te)                                                              'conv4_block9_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv4_block10_0_bn (BatchNorma  (None, 8, 8, 544)   2176        ['conv4_block9_concat[0][0]']    \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block10_0_relu (Activati  (None, 8, 8, 544)   0           ['conv4_block10_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block10_1_conv (Conv2D)  (None, 8, 8, 128)    69632       ['conv4_block10_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block10_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block10_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block10_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block10_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block10_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block10_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block10_concat (Concaten  (None, 8, 8, 576)   0           ['conv4_block9_concat[0][0]',    \n",
      " ate)                                                             'conv4_block10_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block11_0_bn (BatchNorma  (None, 8, 8, 576)   2304        ['conv4_block10_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block11_0_relu (Activati  (None, 8, 8, 576)   0           ['conv4_block11_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block11_1_conv (Conv2D)  (None, 8, 8, 128)    73728       ['conv4_block11_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block11_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block11_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block11_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block11_1_bn[0][0]']     \n",
      " on)                                                                                              \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv4_block11_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block11_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block11_concat (Concaten  (None, 8, 8, 608)   0           ['conv4_block10_concat[0][0]',   \n",
      " ate)                                                             'conv4_block11_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block12_0_bn (BatchNorma  (None, 8, 8, 608)   2432        ['conv4_block11_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block12_0_relu (Activati  (None, 8, 8, 608)   0           ['conv4_block12_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block12_1_conv (Conv2D)  (None, 8, 8, 128)    77824       ['conv4_block12_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block12_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block12_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block12_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block12_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block12_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block12_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block12_concat (Concaten  (None, 8, 8, 640)   0           ['conv4_block11_concat[0][0]',   \n",
      " ate)                                                             'conv4_block12_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block13_0_bn (BatchNorma  (None, 8, 8, 640)   2560        ['conv4_block12_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block13_0_relu (Activati  (None, 8, 8, 640)   0           ['conv4_block13_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block13_1_conv (Conv2D)  (None, 8, 8, 128)    81920       ['conv4_block13_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block13_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block13_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block13_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block13_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block13_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block13_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block13_concat (Concaten  (None, 8, 8, 672)   0           ['conv4_block12_concat[0][0]',   \n",
      " ate)                                                             'conv4_block13_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block14_0_bn (BatchNorma  (None, 8, 8, 672)   2688        ['conv4_block13_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block14_0_relu (Activati  (None, 8, 8, 672)   0           ['conv4_block14_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block14_1_conv (Conv2D)  (None, 8, 8, 128)    86016       ['conv4_block14_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block14_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block14_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block14_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block14_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block14_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block14_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block14_concat (Concaten  (None, 8, 8, 704)   0           ['conv4_block13_concat[0][0]',   \n",
      " ate)                                                             'conv4_block14_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block15_0_bn (BatchNorma  (None, 8, 8, 704)   2816        ['conv4_block14_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block15_0_relu (Activati  (None, 8, 8, 704)   0           ['conv4_block15_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block15_1_conv (Conv2D)  (None, 8, 8, 128)    90112       ['conv4_block15_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block15_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block15_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block15_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block15_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block15_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block15_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block15_concat (Concaten  (None, 8, 8, 736)   0           ['conv4_block14_concat[0][0]',   \n",
      " ate)                                                             'conv4_block15_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block16_0_bn (BatchNorma  (None, 8, 8, 736)   2944        ['conv4_block15_concat[0][0]']   \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block16_0_relu (Activati  (None, 8, 8, 736)   0           ['conv4_block16_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block16_1_conv (Conv2D)  (None, 8, 8, 128)    94208       ['conv4_block16_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block16_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block16_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block16_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block16_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block16_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block16_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block16_concat (Concaten  (None, 8, 8, 768)   0           ['conv4_block15_concat[0][0]',   \n",
      " ate)                                                             'conv4_block16_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block17_0_bn (BatchNorma  (None, 8, 8, 768)   3072        ['conv4_block16_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block17_0_relu (Activati  (None, 8, 8, 768)   0           ['conv4_block17_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block17_1_conv (Conv2D)  (None, 8, 8, 128)    98304       ['conv4_block17_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block17_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block17_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block17_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block17_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block17_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block17_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block17_concat (Concaten  (None, 8, 8, 800)   0           ['conv4_block16_concat[0][0]',   \n",
      " ate)                                                             'conv4_block17_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block18_0_bn (BatchNorma  (None, 8, 8, 800)   3200        ['conv4_block17_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block18_0_relu (Activati  (None, 8, 8, 800)   0           ['conv4_block18_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block18_1_conv (Conv2D)  (None, 8, 8, 128)    102400      ['conv4_block18_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block18_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block18_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block18_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block18_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block18_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block18_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block18_concat (Concaten  (None, 8, 8, 832)   0           ['conv4_block17_concat[0][0]',   \n",
      " ate)                                                             'conv4_block18_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block19_0_bn (BatchNorma  (None, 8, 8, 832)   3328        ['conv4_block18_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block19_0_relu (Activati  (None, 8, 8, 832)   0           ['conv4_block19_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block19_1_conv (Conv2D)  (None, 8, 8, 128)    106496      ['conv4_block19_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block19_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block19_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block19_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block19_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block19_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block19_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block19_concat (Concaten  (None, 8, 8, 864)   0           ['conv4_block18_concat[0][0]',   \n",
      " ate)                                                             'conv4_block19_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block20_0_bn (BatchNorma  (None, 8, 8, 864)   3456        ['conv4_block19_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block20_0_relu (Activati  (None, 8, 8, 864)   0           ['conv4_block20_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block20_1_conv (Conv2D)  (None, 8, 8, 128)    110592      ['conv4_block20_0_relu[0][0]']   \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv4_block20_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block20_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block20_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block20_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block20_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block20_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block20_concat (Concaten  (None, 8, 8, 896)   0           ['conv4_block19_concat[0][0]',   \n",
      " ate)                                                             'conv4_block20_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block21_0_bn (BatchNorma  (None, 8, 8, 896)   3584        ['conv4_block20_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block21_0_relu (Activati  (None, 8, 8, 896)   0           ['conv4_block21_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block21_1_conv (Conv2D)  (None, 8, 8, 128)    114688      ['conv4_block21_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block21_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block21_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block21_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block21_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block21_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block21_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block21_concat (Concaten  (None, 8, 8, 928)   0           ['conv4_block20_concat[0][0]',   \n",
      " ate)                                                             'conv4_block21_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block22_0_bn (BatchNorma  (None, 8, 8, 928)   3712        ['conv4_block21_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block22_0_relu (Activati  (None, 8, 8, 928)   0           ['conv4_block22_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block22_1_conv (Conv2D)  (None, 8, 8, 128)    118784      ['conv4_block22_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block22_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block22_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block22_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block22_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block22_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block22_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block22_concat (Concaten  (None, 8, 8, 960)   0           ['conv4_block21_concat[0][0]',   \n",
      " ate)                                                             'conv4_block22_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block23_0_bn (BatchNorma  (None, 8, 8, 960)   3840        ['conv4_block22_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block23_0_relu (Activati  (None, 8, 8, 960)   0           ['conv4_block23_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block23_1_conv (Conv2D)  (None, 8, 8, 128)    122880      ['conv4_block23_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block23_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block23_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block23_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block23_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block23_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block23_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block23_concat (Concaten  (None, 8, 8, 992)   0           ['conv4_block22_concat[0][0]',   \n",
      " ate)                                                             'conv4_block23_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block24_0_bn (BatchNorma  (None, 8, 8, 992)   3968        ['conv4_block23_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block24_0_relu (Activati  (None, 8, 8, 992)   0           ['conv4_block24_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block24_1_conv (Conv2D)  (None, 8, 8, 128)    126976      ['conv4_block24_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv4_block24_1_bn (BatchNorma  (None, 8, 8, 128)   512         ['conv4_block24_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv4_block24_1_relu (Activati  (None, 8, 8, 128)   0           ['conv4_block24_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv4_block24_2_conv (Conv2D)  (None, 8, 8, 32)     36864       ['conv4_block24_1_relu[0][0]']   \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv4_block24_concat (Concaten  (None, 8, 8, 1024)  0           ['conv4_block23_concat[0][0]',   \n",
      " ate)                                                             'conv4_block24_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " pool4_bn (BatchNormalization)  (None, 8, 8, 1024)   4096        ['conv4_block24_concat[0][0]']   \n",
      "                                                                                                  \n",
      " pool4_relu (Activation)        (None, 8, 8, 1024)   0           ['pool4_bn[0][0]']               \n",
      "                                                                                                  \n",
      " pool4_conv (Conv2D)            (None, 8, 8, 512)    524288      ['pool4_relu[0][0]']             \n",
      "                                                                                                  \n",
      " pool4_pool (AveragePooling2D)  (None, 4, 4, 512)    0           ['pool4_conv[0][0]']             \n",
      "                                                                                                  \n",
      " conv5_block1_0_bn (BatchNormal  (None, 4, 4, 512)   2048        ['pool4_pool[0][0]']             \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block1_0_relu (Activatio  (None, 4, 4, 512)   0           ['conv5_block1_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block1_1_conv (Conv2D)   (None, 4, 4, 128)    65536       ['conv5_block1_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block1_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block1_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block1_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block1_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block1_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block1_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block1_concat (Concatena  (None, 4, 4, 544)   0           ['pool4_pool[0][0]',             \n",
      " te)                                                              'conv5_block1_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block2_0_bn (BatchNormal  (None, 4, 4, 544)   2176        ['conv5_block1_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block2_0_relu (Activatio  (None, 4, 4, 544)   0           ['conv5_block2_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block2_1_conv (Conv2D)   (None, 4, 4, 128)    69632       ['conv5_block2_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block2_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block2_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block2_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block2_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block2_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block2_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block2_concat (Concatena  (None, 4, 4, 576)   0           ['conv5_block1_concat[0][0]',    \n",
      " te)                                                              'conv5_block2_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block3_0_bn (BatchNormal  (None, 4, 4, 576)   2304        ['conv5_block2_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block3_0_relu (Activatio  (None, 4, 4, 576)   0           ['conv5_block3_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block3_1_conv (Conv2D)   (None, 4, 4, 128)    73728       ['conv5_block3_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block3_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block3_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block3_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block3_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block3_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block3_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block3_concat (Concatena  (None, 4, 4, 608)   0           ['conv5_block2_concat[0][0]',    \n",
      " te)                                                              'conv5_block3_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block4_0_bn (BatchNormal  (None, 4, 4, 608)   2432        ['conv5_block3_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block4_0_relu (Activatio  (None, 4, 4, 608)   0           ['conv5_block4_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block4_1_conv (Conv2D)   (None, 4, 4, 128)    77824       ['conv5_block4_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block4_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block4_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block4_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block4_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " conv5_block4_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block4_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block4_concat (Concatena  (None, 4, 4, 640)   0           ['conv5_block3_concat[0][0]',    \n",
      " te)                                                              'conv5_block4_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block5_0_bn (BatchNormal  (None, 4, 4, 640)   2560        ['conv5_block4_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block5_0_relu (Activatio  (None, 4, 4, 640)   0           ['conv5_block5_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block5_1_conv (Conv2D)   (None, 4, 4, 128)    81920       ['conv5_block5_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block5_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block5_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block5_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block5_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block5_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block5_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block5_concat (Concatena  (None, 4, 4, 672)   0           ['conv5_block4_concat[0][0]',    \n",
      " te)                                                              'conv5_block5_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block6_0_bn (BatchNormal  (None, 4, 4, 672)   2688        ['conv5_block5_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block6_0_relu (Activatio  (None, 4, 4, 672)   0           ['conv5_block6_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block6_1_conv (Conv2D)   (None, 4, 4, 128)    86016       ['conv5_block6_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block6_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block6_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block6_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block6_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block6_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block6_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block6_concat (Concatena  (None, 4, 4, 704)   0           ['conv5_block5_concat[0][0]',    \n",
      " te)                                                              'conv5_block6_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block7_0_bn (BatchNormal  (None, 4, 4, 704)   2816        ['conv5_block6_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block7_0_relu (Activatio  (None, 4, 4, 704)   0           ['conv5_block7_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block7_1_conv (Conv2D)   (None, 4, 4, 128)    90112       ['conv5_block7_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block7_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block7_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block7_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block7_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block7_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block7_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block7_concat (Concatena  (None, 4, 4, 736)   0           ['conv5_block6_concat[0][0]',    \n",
      " te)                                                              'conv5_block7_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block8_0_bn (BatchNormal  (None, 4, 4, 736)   2944        ['conv5_block7_concat[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block8_0_relu (Activatio  (None, 4, 4, 736)   0           ['conv5_block8_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block8_1_conv (Conv2D)   (None, 4, 4, 128)    94208       ['conv5_block8_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block8_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block8_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block8_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block8_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block8_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block8_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block8_concat (Concatena  (None, 4, 4, 768)   0           ['conv5_block7_concat[0][0]',    \n",
      " te)                                                              'conv5_block8_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block9_0_bn (BatchNormal  (None, 4, 4, 768)   3072        ['conv5_block8_concat[0][0]']    \n",
      " ization)                                                                                         \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                  \n",
      " conv5_block9_0_relu (Activatio  (None, 4, 4, 768)   0           ['conv5_block9_0_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block9_1_conv (Conv2D)   (None, 4, 4, 128)    98304       ['conv5_block9_0_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block9_1_bn (BatchNormal  (None, 4, 4, 128)   512         ['conv5_block9_1_conv[0][0]']    \n",
      " ization)                                                                                         \n",
      "                                                                                                  \n",
      " conv5_block9_1_relu (Activatio  (None, 4, 4, 128)   0           ['conv5_block9_1_bn[0][0]']      \n",
      " n)                                                                                               \n",
      "                                                                                                  \n",
      " conv5_block9_2_conv (Conv2D)   (None, 4, 4, 32)     36864       ['conv5_block9_1_relu[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block9_concat (Concatena  (None, 4, 4, 800)   0           ['conv5_block8_concat[0][0]',    \n",
      " te)                                                              'conv5_block9_2_conv[0][0]']    \n",
      "                                                                                                  \n",
      " conv5_block10_0_bn (BatchNorma  (None, 4, 4, 800)   3200        ['conv5_block9_concat[0][0]']    \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block10_0_relu (Activati  (None, 4, 4, 800)   0           ['conv5_block10_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block10_1_conv (Conv2D)  (None, 4, 4, 128)    102400      ['conv5_block10_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block10_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block10_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block10_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block10_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block10_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block10_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block10_concat (Concaten  (None, 4, 4, 832)   0           ['conv5_block9_concat[0][0]',    \n",
      " ate)                                                             'conv5_block10_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block11_0_bn (BatchNorma  (None, 4, 4, 832)   3328        ['conv5_block10_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block11_0_relu (Activati  (None, 4, 4, 832)   0           ['conv5_block11_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block11_1_conv (Conv2D)  (None, 4, 4, 128)    106496      ['conv5_block11_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block11_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block11_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block11_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block11_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block11_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block11_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block11_concat (Concaten  (None, 4, 4, 864)   0           ['conv5_block10_concat[0][0]',   \n",
      " ate)                                                             'conv5_block11_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block12_0_bn (BatchNorma  (None, 4, 4, 864)   3456        ['conv5_block11_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block12_0_relu (Activati  (None, 4, 4, 864)   0           ['conv5_block12_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block12_1_conv (Conv2D)  (None, 4, 4, 128)    110592      ['conv5_block12_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block12_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block12_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block12_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block12_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block12_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block12_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block12_concat (Concaten  (None, 4, 4, 896)   0           ['conv5_block11_concat[0][0]',   \n",
      " ate)                                                             'conv5_block12_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block13_0_bn (BatchNorma  (None, 4, 4, 896)   3584        ['conv5_block12_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block13_0_relu (Activati  (None, 4, 4, 896)   0           ['conv5_block13_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block13_1_conv (Conv2D)  (None, 4, 4, 128)    114688      ['conv5_block13_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block13_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block13_1_conv[0][0]']   \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block13_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block13_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block13_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block13_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block13_concat (Concaten  (None, 4, 4, 928)   0           ['conv5_block12_concat[0][0]',   \n",
      " ate)                                                             'conv5_block13_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block14_0_bn (BatchNorma  (None, 4, 4, 928)   3712        ['conv5_block13_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block14_0_relu (Activati  (None, 4, 4, 928)   0           ['conv5_block14_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block14_1_conv (Conv2D)  (None, 4, 4, 128)    118784      ['conv5_block14_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block14_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block14_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block14_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block14_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block14_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block14_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block14_concat (Concaten  (None, 4, 4, 960)   0           ['conv5_block13_concat[0][0]',   \n",
      " ate)                                                             'conv5_block14_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block15_0_bn (BatchNorma  (None, 4, 4, 960)   3840        ['conv5_block14_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block15_0_relu (Activati  (None, 4, 4, 960)   0           ['conv5_block15_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block15_1_conv (Conv2D)  (None, 4, 4, 128)    122880      ['conv5_block15_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block15_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block15_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block15_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block15_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block15_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block15_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block15_concat (Concaten  (None, 4, 4, 992)   0           ['conv5_block14_concat[0][0]',   \n",
      " ate)                                                             'conv5_block15_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block16_0_bn (BatchNorma  (None, 4, 4, 992)   3968        ['conv5_block15_concat[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block16_0_relu (Activati  (None, 4, 4, 992)   0           ['conv5_block16_0_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block16_1_conv (Conv2D)  (None, 4, 4, 128)    126976      ['conv5_block16_0_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block16_1_bn (BatchNorma  (None, 4, 4, 128)   512         ['conv5_block16_1_conv[0][0]']   \n",
      " lization)                                                                                        \n",
      "                                                                                                  \n",
      " conv5_block16_1_relu (Activati  (None, 4, 4, 128)   0           ['conv5_block16_1_bn[0][0]']     \n",
      " on)                                                                                              \n",
      "                                                                                                  \n",
      " conv5_block16_2_conv (Conv2D)  (None, 4, 4, 32)     36864       ['conv5_block16_1_relu[0][0]']   \n",
      "                                                                                                  \n",
      " conv5_block16_concat (Concaten  (None, 4, 4, 1024)  0           ['conv5_block15_concat[0][0]',   \n",
      " ate)                                                             'conv5_block16_2_conv[0][0]']   \n",
      "                                                                                                  \n",
      " bn (BatchNormalization)        (None, 4, 4, 1024)   4096        ['conv5_block16_concat[0][0]']   \n",
      "                                                                                                  \n",
      " relu (Activation)              (None, 4, 4, 1024)   0           ['bn[0][0]']                     \n",
      "                                                                                                  \n",
      " global_average_pooling2d_4 (Gl  (None, 1024)        0           ['relu[0][0]']                   \n",
      " obalAveragePooling2D)                                                                            \n",
      "                                                                                                  \n",
      " dense_53 (Dense)               (None, 256)          262400      ['global_average_pooling2d_4[0][0\n",
      "                                                                 ]']                              \n",
      "                                                                                                  \n",
      " dense_54 (Dense)               (None, 4)            1028        ['dense_53[0][0]']               \n",
      "                                                                                                  \n",
      "==================================================================================================\n",
      "Total params: 7,300,932\n",
      "Trainable params: 7,217,284\n",
      "Non-trainable params: 83,648\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.applications import DenseNet121\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "# Load DenseNet-121 pre-trained on ImageNet without the top classification layer\n",
    "base_model = DenseNet121(include_top=False, weights='imagenet', input_shape=(128, 128, 1))\n",
    "\n",
    "# Add a global average pooling layer\n",
    "x = base_model.output\n",
    "x = GlobalAveragePooling2D()(x)\n",
    "                             \n",
    "\n",
    "# Add a fully connected layer with 256 units and ReLU activation\n",
    "x = Dense(256, activation='relu')(x)\n",
    "\n",
    "# Add a classification layer with the number of classes\n",
    "predictions = Dense(4, activation='softmax')(x)\n",
    "\n",
    "# Create the model\n",
    "model = Model(inputs=base_model.input, outputs=predictions)\n",
    "\n",
    "# Compile the model\n",
    "learning_rate = 0.001\n",
    "model.compile(optimizer=Adam(learning_rate),\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "520f669c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# steps = int(len(train_images)/batch_size)\n",
    "# Train your model using your own dataset\n",
    "model.fit(train_images, train_labels2, epochs=5,steps_per_epoch=steps,validation_data=(val_images, val_labels2))\n",
    "\n",
    "# Evaluate the model\n",
    "loss, DenseNet121_accuracy = model.evaluate(test_images, test_labels2)\n",
    "print(\"Test accuracy:\", DenseNet121_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b1448b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "469884a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4aba07b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7df5a24f",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(4)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2310afad",
   "metadata": {},
   "source": [
    "Model (4) DenseNet169"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b958ca7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.keras.applications import DenseNet169\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Flatten\n",
    "\n",
    "# Load the pre-trained DenseNet169 model without the top layer\n",
    "base_model = DenseNet169(weights='imagenet', include_top=False, input_shape=(128, 128, 1))\n",
    "\n",
    "# Create a new model and add the DenseNet169 base model\n",
    "model = Sequential()\n",
    "model.add(base_model)\n",
    "\n",
    "# Add additional layers on top of the base model\n",
    "model.add(Flatten())\n",
    "model.add(Dense(256, activation='relu'))\n",
    "model.add(Dense(4, activation='softmax')) \n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Print the model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab92b21a",
   "metadata": {},
   "outputs": [],
   "source": [
    "steps = int(len(train_images)/batch_size)\n",
    "# Train your model using your own dataset\n",
    "history=model.fit(train_images, train_labels2, epochs=5,steps_per_epoch=steps,validation_data=(val_images, val_labels2))\n",
    "\n",
    "# Evaluate the model\n",
    "loss, DenseNet169_accuracy = model.evaluate(test_images, test_labels2)\n",
    "print(\"Test accuracy:\", DenseNet169_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7d876a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f20117b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dab63e3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0abd9be1",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(4)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c521806",
   "metadata": {},
   "source": [
    "Model (5) Assembly Net"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "fe8b9ab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "2434/2434 [==============================] - 2209s 903ms/step - loss: 2.0259 - accuracy: 0.5996 - val_loss: 0.8030 - val_accuracy: 0.7170\n",
      "Epoch 2/5\n",
      "2434/2434 [==============================] - 2203s 905ms/step - loss: 0.7919 - accuracy: 0.7000 - val_loss: 0.6963 - val_accuracy: 0.7722\n",
      "Epoch 3/5\n",
      "2434/2434 [==============================] - 2214s 910ms/step - loss: 0.9112 - accuracy: 0.6474 - val_loss: 0.6892 - val_accuracy: 0.7566\n",
      "Epoch 4/5\n",
      "2434/2434 [==============================] - 2302s 946ms/step - loss: 0.6793 - accuracy: 0.7434 - val_loss: 0.6182 - val_accuracy: 0.7998\n",
      "Epoch 5/5\n",
      "2434/2434 [==============================] - 2372s 974ms/step - loss: 0.6421 - accuracy: 0.7571 - val_loss: 0.5615 - val_accuracy: 0.8118\n",
      "54/54 [==============================] - 73s 1s/step - loss: 1.2181 - accuracy: 0.7062\n",
      "Test accuracy for filter size (128, (5, 5)): 0.7061583399772644\n"
     ]
    }
   ],
   "source": [
    "# Define the model architecture with different filter sizes and numbers\n",
    "filter_sizes = [(32, (3, 3)), (64, (3, 3)), (128, (3, 3)), (32, (5, 5)), (64, (5, 5)), (128, (5, 5))]\n",
    "for filter_size in filter_sizes:\n",
    "    model = tf.keras.Sequential([\n",
    "        tf.keras.layers.Conv2D(filter_size[0], filter_size[1], activation='relu', input_shape=(128,128, 1)),\n",
    "        tf.keras.layers.MaxPooling2D((2, 2)),\n",
    "        tf.keras.layers.Conv2D(filter_size[0]*2, filter_size[1], activation='relu'),\n",
    "        tf.keras.layers.MaxPooling2D((2, 2)),\n",
    "        tf.keras.layers.Conv2D(filter_size[0]*4, filter_size[1], activation='relu'),\n",
    "        tf.keras.layers.MaxPooling2D((2, 2)),\n",
    "        tf.keras.layers.Flatten(),\n",
    "        tf.keras.layers.Dense(256, activation='relu'),\n",
    "        tf.keras.layers.Dropout(0.5),\n",
    "        tf.keras.layers.Dense(4, activation='softmax')\n",
    "    ])\n",
    "    \n",
    "# Compile the model\n",
    "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "\n",
    "# Train the model\n",
    "history = model.fit(train_images,train_labels2,batch_size=5, epochs=5, validation_data=(val_images,val_labels2))\n",
    "\n",
    "# Evaluate the model on the test data\n",
    "test_loss, AssemblyNet_acc = model.evaluate(test_images,test_labels2)\n",
    "print('Test accuracy for filter size {}: {}'.format(filter_size, AssemblyNet_acc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "e9541a1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "54/54 [==============================] - 74s 1s/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[9.0800440e-01, 8.6066319e-04, 4.9091331e-03, 8.6225830e-02],\n",
       "       [4.0217346e-01, 1.4995824e-04, 2.5726917e-01, 3.4040740e-01],\n",
       "       [1.0000000e+00, 3.1143341e-14, 1.1409521e-14, 1.3857330e-11],\n",
       "       ...,\n",
       "       [7.6940013e-03, 1.5654711e-01, 1.9616906e-02, 8.1614196e-01],\n",
       "       [3.5491281e-03, 8.0307007e-02, 3.6020735e-03, 9.1254181e-01],\n",
       "       [1.9576855e-02, 1.0889606e-01, 3.4627314e-03, 8.6806428e-01]],\n",
       "      dtype=float32)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(test_images)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "9f24dabd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.81      0.77       400\n",
      "           1       0.88      0.40      0.55       421\n",
      "           2       0.78      0.82      0.80       510\n",
      "           3       0.55      0.79      0.65       374\n",
      "\n",
      "    accuracy                           0.71      1705\n",
      "   macro avg       0.74      0.70      0.69      1705\n",
      "weighted avg       0.74      0.71      0.70      1705\n",
      " [[322   2  20  56]\n",
      " [ 79 168  67 107]\n",
      " [  8   2 419  81]\n",
      " [ 26  19  34 295]]\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Convert the true labels from one-hot encoded format to class labels\n",
    "true_classes = np.argmax(test_labels2, axis=1)\n",
    "\n",
    "# Generate the classification report\n",
    "report = classification_report(true_classes, predicted_classes)\n",
    "cm = confusion_matrix(true_classes, predicted_classes)\n",
    "# Print the classification report\n",
    "print(report,cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "56a1307b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the training and validation accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('Model Accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylim([0, 1])\n",
    "plt.legend(['Train', 'Test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fb8273f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "plt.grid(True)\n",
    "plt.plot(history.history['accuracy'], '.g-', linewidth=2)\n",
    "plt.plot(history.history['loss'], '.r-', linewidth=2)\n",
    "plt.title('Model Training History')\n",
    "plt.xlabel('epoch')\n",
    "plt.xticks([x for x in range(5)])\n",
    "plt.legend(['Training Accuracy', 'Training loss'], loc='upper left', bbox_to_anchor=(1, 1))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "691117b5",
   "metadata": {},
   "source": [
    "# Comparison between 3 classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "700d41d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Other Evaluation Metrics</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Customized_CNN</th>\n",
       "      <td>{'precision': {'Giloma': 0.81, 'Pituitary': 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DNN</th>\n",
       "      <td>{'precision': {'Giloma': 0.81, 'Pituitary': 0....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fine_Tuned_CNN</th>\n",
       "      <td>{'ResNet50_Modle': {'precision': {'Giloma': 0....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Other Evaluation Metrics\n",
       "Customized_CNN  {'precision': {'Giloma': 0.81, 'Pituitary': 0....\n",
       "DNN             {'precision': {'Giloma': 0.81, 'Pituitary': 0....\n",
       "Fine_Tuned_CNN  {'ResNet50_Modle': {'precision': {'Giloma': 0...."
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Create a dictionary with data\n",
    "data = {\n",
    "    'Test_Accuracy': [accuracy1, accuracy, DenseNet121_accuracy,DenseNet169_accuracy,AssemblyNet_acc,ResNet50_accuracy,ResNet101_accuracy],\n",
    "     \n",
    "    'Other Evaluation Metrics':{'DNN':{'precision':{'Giloma':0.81,'Pituitary':0.90,'No_tumor':0.84,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.86,'Pituitary':0.51,'No_tumor':0.83,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.84,'Pituitary':0.65,'No_tumor':0.84,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                 \n",
    "                                 'Customized_CNN':{'precision':{'Giloma':0.81,'Pituitary':0.90,'No_tumor':0.84,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.86,'Pituitary':0.51,'No_tumor':0.83,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.84,'Pituitary':0.65,'No_tumor':0.84,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                 'Fine_Tuned_CNN':{\n",
    "                                     'ResNet50_Modle':{'precision':{'Giloma':0.93,'Pituitary':0.93,'No_tumor':0.85,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.89,'Pituitary':0.74,'No_tumor':0.75,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.91,'Pituitary':0.82,'No_tumor':0.80,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                     'ResNet101_Modle':{'precision':{'Giloma':0.93,'Pituitary':0.93,'No_tumor':0.85,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.89,'Pituitary':0.74,'No_tumor':0.75,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.91,'Pituitary':0.82,'No_tumor':0.80,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                      'DenseNet121_Model':{'precision':{'Giloma':0.81,'Pituitary':0.90,'No_tumor':0.84,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.86,'Pituitary':0.51,'No_tumor':0.83,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.84,'Pituitary':0.65,'No_tumor':0.84,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                     'DenseNet169_Modle':{'precision':{'Giloma':0.93,'Pituitary':0.93,'No_tumor':0.85,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.89,'Pituitary':0.74,'No_tumor':0.75,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.91,'Pituitary':0.82,'No_tumor':0.80,'Meningioma':0.76}\n",
    "                                            },\n",
    "                                     'AssemblyNet_Model':{'precision':{'Giloma':0.81,'Pituitary':0.90,'No_tumor':0.84,'Meningioma':0.65},\n",
    "                                                    'Recall':{'Giloma':0.86,'Pituitary':0.51,'No_tumor':0.83,'Meningioma':0.93},\n",
    "                                                    'f1_score':{'Giloma':0.84,'Pituitary':0.65,'No_tumor':0.84,'Meningioma':0.76}\n",
    "                                            }\n",
    "                                 }\n",
    "         \n",
    "     }\n",
    "}\n",
    "\n",
    "# Create a DataFrame from the dictionary\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Print the DataFrame\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a477b6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"The best classifier was the Fine-tuned CNN model.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
